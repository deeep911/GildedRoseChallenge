From 002d3ff1128c09d8fed79479302ed9fb1979af29 Mon Sep 17 00:00:00 2001
From: deep911 <deep911@github.com>
Date: Mon, 1 Feb 2021 18:06:36 +0000
Subject: [PATCH] my changes

---
 .../GildedRose.Tests/GildedRose.Tests.csproj  |  55 +++++++
 .../GildedRose.Tests/GildedRoseTests.cs       | 143 ++++++++++++++++++
 .../GildedRose.Tests/packages.config          |   4 +
 GuildedRoseCode/GildedRose.sln                |   6 +
 .../GildedRose.Application.csproj             |  26 ++--
 .../Interfaces/IInventoryManager.cs           |  12 ++
 .../src/GildedRose.Console/Item.cs            |  11 --
 .../src/GildedRose.Console/Model/Item.cs      |  25 +++
 .../Operations/InventoryManager.cs            |  88 +++++++++++
 .../Operations/OutputOperations.cs            |  19 +++
 .../src/GildedRose.Console/Program.cs         |  43 ++----
 .../src/GildedRose.Console/Repository/Shop.cs |  23 +++
 .../src/GildedRose.Console/Shop.cs            |  86 -----------
 13 files changed, 399 insertions(+), 142 deletions(-)
 create mode 100644 GuildedRoseCode/GildedRose.Tests/GildedRose.Tests.csproj
 create mode 100644 GuildedRoseCode/GildedRose.Tests/GildedRoseTests.cs
 create mode 100644 GuildedRoseCode/GildedRose.Tests/packages.config
 create mode 100644 GuildedRoseCode/src/GildedRose.Console/Interfaces/IInventoryManager.cs
 delete mode 100644 GuildedRoseCode/src/GildedRose.Console/Item.cs
 create mode 100644 GuildedRoseCode/src/GildedRose.Console/Model/Item.cs
 create mode 100644 GuildedRoseCode/src/GildedRose.Console/Operations/InventoryManager.cs
 create mode 100644 GuildedRoseCode/src/GildedRose.Console/Operations/OutputOperations.cs
 create mode 100644 GuildedRoseCode/src/GildedRose.Console/Repository/Shop.cs
 delete mode 100644 GuildedRoseCode/src/GildedRose.Console/Shop.cs

diff --git a/GuildedRoseCode/GildedRose.Tests/GildedRose.Tests.csproj b/GuildedRoseCode/GildedRose.Tests/GildedRose.Tests.csproj
new file mode 100644
index 0000000..d972a95
--- /dev/null
+++ b/GuildedRoseCode/GildedRose.Tests/GildedRose.Tests.csproj
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="..\packages\NUnit.3.13.1\build\NUnit.props" Condition="Exists('..\packages\NUnit.3.13.1\build\NUnit.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{6A8B16AA-0998-4988-ADC5-FDCF50103B4B}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <RootNamespace>GildedRose.Tests</RootNamespace>
+    <AssemblyName>GildedRose.Tests</AssemblyName>
+    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug</OutputPath>
+    <DefineConstants>DEBUG;</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release</OutputPath>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="nunit.framework">
+      <HintPath>..\packages\NUnit.3.13.1\lib\net45\nunit.framework.dll</HintPath>
+    </Reference>
+    <Reference Include="System.Net" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="System.Net.Http" />
+    <Reference Include="System.Xml" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="Microsoft.CSharp" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="GildedRoseTests.cs" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\src\GildedRose.Console\GildedRose.Application.csproj">
+      <Project>{F2E879A9-7F1C-4C34-AB0D-2662F9815046}</Project>
+      <Name>GildedRose.Application</Name>
+    </ProjectReference>
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="packages.config" />
+  </ItemGroup>
+  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
+</Project>
\ No newline at end of file
diff --git a/GuildedRoseCode/GildedRose.Tests/GildedRoseTests.cs b/GuildedRoseCode/GildedRose.Tests/GildedRoseTests.cs
new file mode 100644
index 0000000..22432cf
--- /dev/null
+++ b/GuildedRoseCode/GildedRose.Tests/GildedRoseTests.cs
@@ -0,0 +1,143 @@
+ï»¿using System;
+using GildedRose.Application.Models;
+using GildedRose.Application.Operations;
+using NUnit.Framework;
+
+
+namespace GildedRose.Tests
+{
+    [TestFixture]
+    public class GildedRoseTests
+    {
+
+        private readonly InventoryManager _inventoryManager = new InventoryManager();
+
+        [Test]
+        [TestCase(null)]
+        [TestCase("")]
+        public void Throw_Exception_When_Item_Name_Is_Empty(string name)
+        {
+            Assert.Throws<ArgumentOutOfRangeException>(() => new Item { Name = name });
+        }
+
+        [Test]
+        [TestCase("Aged Brie", 5, 2, 4, 3)]
+        [TestCase("Aged Brie", 1, 1, 0, 2)]
+        public void Aged_Brie_Increases_Quality_When_SellInValue_Decrease(string name, int sellIn, int quality, int expectedSellIn, int expectedQuality)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.SellIn, Is.EqualTo(expectedSellIn));
+            Assert.That(result.Quality, Is.EqualTo(expectedQuality));
+        }
+
+        [Test]
+        [TestCase("Normal Item", 2, 2, 1, 1)]
+        public void Normal_Item_Decrease_Quality_By_One_When_SellInValue_Decrease_Before_SellByDate_Passed(string name, int quality, int sellIn, int expectedSellIn, int expectedQuality)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.Quality, Is.EqualTo(expectedQuality));
+            Assert.That(result.SellIn, Is.EqualTo(expectedSellIn));
+        }
+
+        [Test]
+        [TestCase("Normal Item", -1, 55, -2, 50)]
+        public void Normal_Item_Decrease_Quality_By_One_When_SellInValue_Decrease_After_SellByDate_Passed(string name, int sellIn, int quality, int expectedSellIn, int expectedQuality)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.Quality, Is.EqualTo(expectedQuality));
+            Assert.That(result.SellIn, Is.EqualTo(expectedSellIn));
+        }
+
+        [Test]
+        [TestCase("Sulfuras", 2, 2, 2, 2)]
+        public void Sulfuras_Do_Not_Increase_Or_Decrease_Quality(string name, int sellIn, int quality,
+            int expectedSellIn, int expectedQuality)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.Quality, Is.EqualTo(expectedQuality));
+            Assert.That(result.SellIn, Is.EqualTo(expectedSellIn));
+
+        }
+
+        [Test]
+        [TestCase("INVALID ITEM", 2, 2, "NO SUCH ITEM")]
+        public void Output_No_Such_Item_When_Item_Name_Is_Invalid_Item(string name, int sellIn, int quality, string expectedOutput)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.Name, Is.EqualTo(expectedOutput));
+        }
+
+
+        [Test]
+        [TestCase("Backstage passes", 9, 2, 8, 4)]
+        public void Backstage_Passes_Qaulity_Increases_By_Two_Between_Six_To_Ten_Days(string name, int sellIn, int quality, int expectedSellIn, int expectedQuality)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.Quality, Is.EqualTo(expectedQuality));
+            Assert.That(result.SellIn, Is.EqualTo(expectedSellIn));
+        }
+
+        [Test]
+        [TestCase("Backstage passes", 4, 3, 3, 6)]
+        public void Backstage_Passes_Qaulity_Increases_By_Three_Between_One_To_Five_Days(string name, int sellIn, int quality, int expectedSellIn, int expectedQuality)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.Quality, Is.EqualTo(expectedQuality));
+            Assert.That(result.SellIn, Is.EqualTo(expectedSellIn));
+        }
+
+        [Test]
+        [TestCase("Backstage passes", -1, 2, -2, 0)]
+        public void Backstage_Passes_Qaulity_Drop_To_Zero_After_Concert_SellIn_Value_Is_Less_Than_Zero(string name, int sellIn, int quality, int expectedSellIn, int expectedQuality)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.Quality, Is.EqualTo(expectedQuality));
+            Assert.That(result.SellIn, Is.EqualTo(expectedSellIn));
+        }
+
+        [Test]
+        [TestCase("Conjured", 2, 2, 1, 0)]
+        [TestCase("Conjured", -1, 5, -2, 1)]
+        public void Conjured_Item_Qaulity_Decrease_Twice_As_Fast_As_Normal_Item(string name, int sellIn, int quality, int expectedSellIn, int expectedQuality)
+        {
+            var item = ItemInitialization(name, sellIn, quality);
+
+            var result = _inventoryManager.UpdateQuality(item);
+
+            Assert.That(result.Quality, Is.EqualTo(expectedQuality));
+            Assert.That(result.SellIn, Is.EqualTo(expectedSellIn));
+        }
+
+        private static Item ItemInitialization(string name, int sellIn, int quality)
+        {
+            return new Item { Name = name, Quality = quality, SellIn = sellIn };
+        }
+    }
+
+}
+
+
diff --git a/GuildedRoseCode/GildedRose.Tests/packages.config b/GuildedRoseCode/GildedRose.Tests/packages.config
new file mode 100644
index 0000000..cfbe591
--- /dev/null
+++ b/GuildedRoseCode/GildedRose.Tests/packages.config
@@ -0,0 +1,4 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<packages>
+  <package id="NUnit" version="3.13.1" targetFramework="net472" />
+</packages>
\ No newline at end of file
diff --git a/GuildedRoseCode/GildedRose.sln b/GuildedRoseCode/GildedRose.sln
index ed2bdc0..a2489ed 100644
--- a/GuildedRoseCode/GildedRose.sln
+++ b/GuildedRoseCode/GildedRose.sln
@@ -5,6 +5,8 @@ VisualStudioVersion = 16.0.30711.63
 MinimumVisualStudioVersion = 10.0.40219.1
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "GildedRose.Application", "src\GildedRose.Console\GildedRose.Application.csproj", "{F2E879A9-7F1C-4C34-AB0D-2662F9815046}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "GildedRose.Tests", "GildedRose.Tests\GildedRose.Tests.csproj", "{6A8B16AA-0998-4988-ADC5-FDCF50103B4B}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -15,6 +17,10 @@ Global
 		{F2E879A9-7F1C-4C34-AB0D-2662F9815046}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{F2E879A9-7F1C-4C34-AB0D-2662F9815046}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{F2E879A9-7F1C-4C34-AB0D-2662F9815046}.Release|Any CPU.Build.0 = Release|Any CPU
+		{6A8B16AA-0998-4988-ADC5-FDCF50103B4B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{6A8B16AA-0998-4988-ADC5-FDCF50103B4B}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{6A8B16AA-0998-4988-ADC5-FDCF50103B4B}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{6A8B16AA-0998-4988-ADC5-FDCF50103B4B}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/GuildedRoseCode/src/GildedRose.Console/GildedRose.Application.csproj b/GuildedRoseCode/src/GildedRose.Console/GildedRose.Application.csproj
index f57ba4b..02ba50f 100644
--- a/GuildedRoseCode/src/GildedRose.Console/GildedRose.Application.csproj
+++ b/GuildedRoseCode/src/GildedRose.Console/GildedRose.Application.csproj
@@ -46,28 +46,24 @@
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
-    <Compile Include="Item.cs" />
-    <Compile Include="Shop.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="Model\Item.cs" />
+    <Compile Include="Interfaces\IInventoryManager.cs" />
+    <Compile Include="Operations\InventoryManager.cs" />
+    <Compile Include="Operations\OutputOperations.cs" />
+    <Compile Include="Repository\Shop.cs" />
   </ItemGroup>
   <ItemGroup>
     <None Include="App.config" />
     <None Include="packages.config" />
   </ItemGroup>
+  <ItemGroup>
+    <Folder Include="Model\" />
+    <Folder Include="Interfaces\" />
+    <Folder Include="Operations\" />
+    <Folder Include="Repository\" />
+  </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
   <Import Project="..\..\packages\GitVersionTask.3.6.5\build\dotnet\GitVersionTask.targets" Condition="Exists('..\..\packages\GitVersionTask.3.6.5\build\dotnet\GitVersionTask.targets')" />
-  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
-    <PropertyGroup>
-      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
-    </PropertyGroup>
-    <Error Condition="!Exists('..\..\packages\GitVersionTask.3.6.5\build\dotnet\GitVersionTask.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\..\packages\GitVersionTask.3.6.5\build\dotnet\GitVersionTask.targets'))" />
-  </Target>
-  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
-       Other similar extension points exist, see Microsoft.Common.targets.
-  <Target Name="BeforeBuild">
-  </Target>
-  <Target Name="AfterBuild">
-  </Target>
-  -->
 </Project>
\ No newline at end of file
diff --git a/GuildedRoseCode/src/GildedRose.Console/Interfaces/IInventoryManager.cs b/GuildedRoseCode/src/GildedRose.Console/Interfaces/IInventoryManager.cs
new file mode 100644
index 0000000..af4c815
--- /dev/null
+++ b/GuildedRoseCode/src/GildedRose.Console/Interfaces/IInventoryManager.cs
@@ -0,0 +1,12 @@
+ï»¿using System.Collections.Generic;
+using GildedRose.Application.Models;
+
+
+namespace GildedRose.Application.Interfaces
+{
+    public interface IInventoryManager
+    {
+        IList<Item> UpdateInventory(IList<Item> items);
+        Item UpdateQuality(Item item);
+    }
+}
diff --git a/GuildedRoseCode/src/GildedRose.Console/Item.cs b/GuildedRoseCode/src/GildedRose.Console/Item.cs
deleted file mode 100644
index 88d5640..0000000
--- a/GuildedRoseCode/src/GildedRose.Console/Item.cs
+++ /dev/null
@@ -1,11 +0,0 @@
-ï»¿namespace GildedRose.Application
-{
-    public class Item
-    {
-        public string Name { get; set; }
-
-        public int SellIn { get; set; }
-
-        public int Quality { get; set; }
-    }
-}
\ No newline at end of file
diff --git a/GuildedRoseCode/src/GildedRose.Console/Model/Item.cs b/GuildedRoseCode/src/GildedRose.Console/Model/Item.cs
new file mode 100644
index 0000000..6d458c3
--- /dev/null
+++ b/GuildedRoseCode/src/GildedRose.Console/Model/Item.cs
@@ -0,0 +1,25 @@
+ï»¿using System;
+
+namespace GildedRose.Application.Models
+{
+    public class Item
+    {
+        public int SellIn { get; set; }
+        public int Quality { get; set; }
+
+        public string Name
+        {
+            get { return _name; }
+            set
+            {
+                if (string.IsNullOrEmpty(value))
+                    throw new ArgumentOutOfRangeException();
+
+                _name = value;
+            }
+
+        }
+        private string _name;
+
+    }
+}
\ No newline at end of file
diff --git a/GuildedRoseCode/src/GildedRose.Console/Operations/InventoryManager.cs b/GuildedRoseCode/src/GildedRose.Console/Operations/InventoryManager.cs
new file mode 100644
index 0000000..1be3bc3
--- /dev/null
+++ b/GuildedRoseCode/src/GildedRose.Console/Operations/InventoryManager.cs
@@ -0,0 +1,88 @@
+ï»¿using System.Collections.Generic;
+using System.Linq;
+using GildedRose.Application.Interfaces;
+using GildedRose.Application.Models;
+
+namespace GildedRose.Application.Operations
+{
+    public class InventoryManager : IInventoryManager
+    {
+        private const int _maxQuality = 50;
+        private const string _noItemValue = "NO SUCH ITEM";
+
+
+        public IList<Item> UpdateInventory(IList<Item> items)
+        {
+            return items.Select(itm => UpdateQuality(itm)).ToList();
+        }
+
+        public Item UpdateQuality(Item item)
+        {
+            if (item.Name.Contains("Sulfuras")) return item;
+
+            if (item.Name.Contains("INVALID ITEM"))
+            {
+                item.Name = _noItemValue;
+            }
+
+            if (item.Name.Contains("Aged Brie"))
+            {
+                item.Quality++;
+            }
+
+            if (item.Name.Contains("Normal Item"))
+            {
+                item.Quality = CalculateNormalItemQuality(item);
+            }
+
+            if (item.Name.Contains("Conjured"))
+            {
+                item.Quality = CalculateConjuredItemQuality(item);
+            }
+
+            if (item.Name.Contains("Backstage passes"))
+            {
+                item.Quality = CalcuateBackstagePassItemQuality(item);
+            }
+
+            item.SellIn--;
+
+            return item;
+        }
+
+        private static int CalculateNormalItemQuality(Item item)
+        {
+            var quality = item.SellIn < 0 ? (item.Quality - 2) : (item.Quality - 1);
+
+            return quality <= _maxQuality ? quality : _maxQuality;
+        }
+
+        private static int CalculateConjuredItemQuality(Item item)
+        {
+            var quality = item.SellIn < 0 ? item.Quality - (2 * 2) : item.Quality - 2;
+
+            return quality <= _maxQuality ? quality : _maxQuality;
+        }
+
+        private static int CalcuateBackstagePassItemQuality(Item item)
+        {
+            var quality = item.Quality;
+
+            if (item.SellIn <= 10 && item.SellIn > 5)
+            {
+                quality = item.Quality + 2;
+            }
+            else if (item.SellIn <= 5 && item.SellIn > 0)
+            {
+                quality = item.Quality + 3;
+            }
+            else if (item.SellIn < 0)
+            {
+                quality = 0;
+            }
+
+            return quality <= _maxQuality ? quality : _maxQuality;
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/GuildedRoseCode/src/GildedRose.Console/Operations/OutputOperations.cs b/GuildedRoseCode/src/GildedRose.Console/Operations/OutputOperations.cs
new file mode 100644
index 0000000..8201a6c
--- /dev/null
+++ b/GuildedRoseCode/src/GildedRose.Console/Operations/OutputOperations.cs
@@ -0,0 +1,19 @@
+ï»¿using static System.Console;
+using System.Collections.Generic;
+using GildedRose.Application.Models;
+
+namespace GildedRose.Application.Operations
+{
+    public class OutputOperation
+    {
+        public static void OutputInventoryUpdateResults(IEnumerable<Item> items)
+        {
+            foreach (var item in items)
+            {
+                WriteLine(item.Name.Contains("NO SUCH ITEM")
+                     ? $"\t {item.Name} "
+                     : $"\t {item.Name}   {item.SellIn}   {item.Quality}");
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/GuildedRoseCode/src/GildedRose.Console/Program.cs b/GuildedRoseCode/src/GildedRose.Console/Program.cs
index 176ae71..93ae4a3 100644
--- a/GuildedRoseCode/src/GildedRose.Console/Program.cs
+++ b/GuildedRoseCode/src/GildedRose.Console/Program.cs
@@ -1,42 +1,25 @@
 ï»¿using System;
-using System.Collections.Generic;
-using MarkdownLog;
+using static System.Console;
+using GildedRose.Application.Operations;
+using GildedRose.Application.Repository;
 
 namespace GildedRose.Application
 {
-    public static class Program
+    internal class Program
     {
-        public static IList<Item> Items;
-
-        static void Main(string[] args)
+        private static void Main(string[] args)
         {
-            Console.WriteLine("OMGHAI!");
-
-            Shop.Items = new List<Item>
-                {
-                    new Item { Name = "+5 Dexterity Vest", SellIn = 10, Quality = 20 },
-                    new Item { Name = "Aged Brie", SellIn = 2, Quality = 0 },
-                    new Item { Name = "Elixir of the Mongoose", SellIn = 5, Quality = 7 },
-                    new Item { Name = "Sulfuras, Hand of Ragnaros", SellIn = 0, Quality = 80 },
-                    new Item
-                        {
-                            Name = "Backstage passes to a TAFKAL80ETC concert",
-                            SellIn = 15,
-                            Quality = 20
-                        },
-                    new Item { Name = "Conjured Mana Cake", SellIn = 3, Quality = 6 }
-                };
+            Write("Expected Output :");
+            WriteLine(Environment.NewLine);
 
-            while (true)
-            {
-                Console.Clear();
+            var inventoryManager = new InventoryManager();
+            var itemList = inventoryManager.UpdateInventory(Shop.Items);
 
-                Shop.UpdateQuality();
+            OutputOperation.OutputInventoryUpdateResults(itemList);
 
-                Console.WriteLine(Shop.Items.ToMarkdownTable());
-                
-                Console.ReadKey();
-            }
+            WriteLine(Environment.NewLine);
+            Write("Press Enter to continue!");
+            ReadKey();
         }
     }
 }
diff --git a/GuildedRoseCode/src/GildedRose.Console/Repository/Shop.cs b/GuildedRoseCode/src/GildedRose.Console/Repository/Shop.cs
new file mode 100644
index 0000000..0fa6ead
--- /dev/null
+++ b/GuildedRoseCode/src/GildedRose.Console/Repository/Shop.cs
@@ -0,0 +1,23 @@
+ï»¿using System.Collections.Generic;
+using GildedRose.Application.Models;
+
+namespace GildedRose.Application.Repository
+{
+    public static class Shop
+    {
+        public static IList<Item> Items { get; } = new List<Item>
+        {
+            new Item {Name = "Aged Brie", SellIn = 1, Quality = 1},
+            new Item {Name = "Backstage passes", SellIn = -1, Quality = 2},
+            new Item {Name = "Backstage passes", SellIn = 9, Quality = 2},
+            new Item {Name = "Sulfuras", SellIn = 2, Quality = 2},
+            new Item {Name = "Normal Item", SellIn = -1, Quality = 55},
+            new Item {Name = "Normal Item", SellIn = 2, Quality = 2},
+            new Item {Name = "INVALID ITEM", SellIn = 2, Quality = 2},
+            new Item {Name = "Conjured", SellIn = 2, Quality = 2},
+            new Item {Name = "Conjured", SellIn = -1, Quality = 5}
+        };
+
+    }
+
+}
\ No newline at end of file
diff --git a/GuildedRoseCode/src/GildedRose.Console/Shop.cs b/GuildedRoseCode/src/GildedRose.Console/Shop.cs
deleted file mode 100644
index 47f4ffa..0000000
--- a/GuildedRoseCode/src/GildedRose.Console/Shop.cs
+++ /dev/null
@@ -1,86 +0,0 @@
-ï»¿using System.Collections.Generic;
-
-namespace GildedRose.Application
-{
-    public static class Shop
-    {
-        public static IList<Item> Items;
-
-        public static void UpdateQuality()
-        {
-            for (var i = 0; i < Items.Count; i++)
-            {
-                if (Items[i].Name != "Aged Brie" && Items[i].Name != "Backstage passes to a TAFKAL80ETC concert")
-                {
-                    if (Items[i].Quality > 0)
-                    {
-                        if (Items[i].Name != "Sulfuras, Hand of Ragnaros")
-                        {
-                            Items[i].Quality = Items[i].Quality - 1;
-                        }
-                    }
-                }
-                else
-                {
-                    if (Items[i].Quality < 50)
-                    {
-                        Items[i].Quality = Items[i].Quality + 1;
-
-                        if (Items[i].Name == "Backstage passes to a TAFKAL80ETC concert")
-                        {
-                            if (Items[i].SellIn < 11)
-                            {
-                                if (Items[i].Quality < 50)
-                                {
-                                    Items[i].Quality = Items[i].Quality + 1;
-                                }
-                            }
-
-                            if (Items[i].SellIn < 6)
-                            {
-                                if (Items[i].Quality < 50)
-                                {
-                                    Items[i].Quality = Items[i].Quality + 1;
-                                }
-                            }
-                        }
-                    }
-                }
-
-                if (Items[i].Name != "Sulfuras, Hand of Ragnaros")
-                {
-                    Items[i].SellIn = Items[i].SellIn - 1;
-                }
-
-                if (Items[i].SellIn < 0)
-                {
-                    if (Items[i].Name != "Aged Brie")
-                    {
-                        if (Items[i].Name != "Backstage passes to a TAFKAL80ETC concert")
-                        {
-                            if (Items[i].Quality > 0)
-                            {
-                                if (Items[i].Name != "Sulfuras, Hand of Ragnaros")
-                                {
-                                    Items[i].Quality = Items[i].Quality - 1;
-                                }
-                            }
-                        }
-                        else
-                        {
-                            Items[i].Quality = Items[i].Quality - Items[i].Quality;
-                        }
-                    }
-                    else
-                    {
-                        if (Items[i].Quality < 50)
-                        {
-                            Items[i].Quality = Items[i].Quality + 1;
-                        }
-                    }
-                }
-            }
-        }
-
-    }
-}
-- 
2.17.2 (Apple Git-113)

